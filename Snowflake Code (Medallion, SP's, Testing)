USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;

-- Create 3 schemas for medallion struture

CREATE OR REPLACE DATABASE AIRFLOW_DB;

USE DATABASE AIRFLOW_DB;

CREATE OR REPLACE SCHEMA BRONZE;
CREATE OR REPLACE SCHEMA SILVER;
CREATE OR REPLACE SCHEMA GOLD;

-- Build out tables/stages for each layer
-- BRONZE
USE SCHEMA AIRFLOW_DB.BRONZE;

CREATE OR REPLACE STORAGE INTEGRATION AIRFLOW_S3_INT
    TYPE = EXTERNAL_STAGE
    STORAGE_PROVIDER = 'S3'
    ENABLED = TRUE
    STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::599192675813:role/snowflake-load-role'
    STORAGE_ALLOWED_LOCATIONS = ('s3://airflow-data-bucket');

    DESC INTEGRATION AIRFLOW_S3_INT;

-- Create external stage 
CREATE OR REPLACE STAGE AIRFLOW_DB.BRONZE.AIRFLOW_S3_STAGE
STORAGE_INTEGRATION = AIRFLOW_S3_INT
URL= 's3://airflow-data-bucket';

-- Test newly created stage
ls @AIRFLOW_DB.BRONZE.AIRFLOW_S3_STAGE;


-- Setting up BRONZE layer objects - raw data extracted from HTTP --> Python --> S3 bucket
USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;
USE SCHEMA AIRFLOW_DB.BRONZE;

-- Doctors raw data
CREATE OR REPLACE TABLE AIRFLOW_DB.BRONZE.DOCTORS_RAW
(
DOCTOR_ID STRING,
NAME STRING,
GENDER STRING,
SPECIALIZATION STRING,
HOSPITAL_ID STRING,
CITY STRING
);

-- Hostpitals raw data
CREATE OR REPLACE TABLE AIRFLOW_DB.BRONZE.HOSPITALS_RAW
(
HOSPITAL_ID STRING,
HOSPITAL_NAME STRING,
CITY STRING
);

-- Patients raw data
CREATE OR REPLACE TABLE AIRFLOW_DB.BRONZE.PATIENTS_RAW
(
PATIENT_ID STRING,
NAME STRING,
GENDER STRING,
DOB STRING,
CITY STRING
);

-- Treatments raw data
CREATE OR REPLACE TABLE AIRFLOW_DB.BRONZE.TREATMENTS_RAW
(
TREATMENT_ID STRING,
VISIT_ID STRING,
TREATMENT_TYPE STRING,
OUTCOME STRING,
COST STRING
);

-- Visits raw data
CREATE OR REPLACE TABLE AIRFLOW_DB.BRONZE.VISITS_RAW
(
VISIT_ID STRING,
PATIENT_ID STRING,
HOSPITAL_ID STRING,
VISIT_DATE STRING,
DEPARTMENT STRING,
DOCTOR_ID STRING
);

-- SETTING UP SILVER LAYER OBJECTS -- TRANSFORMED DATA
-- Reading data from bronze layer tables, applying transformations via DAGs, then loading to silver tables
USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;

USE SCHEMA AIRFLOW_DB.SILVER;

-- Stored procedure to transform Patients data
CREATE OR REPLACE PROCEDURE AIRFLOW_DB.SILVER.PATIENTS_TRANSFORM_SP()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    CREATE OR REPLACE TABLE AIRFLOW_DB.SILVER.PATIENTS_TRANSFORM AS
    SELECT
        PATIENT_ID AS PATIENT_ID,
        SPLIT_PART(NAME,' ',1) AS PATIENT_FIRST_NAME,
        SPLIT_PART(NAME,' ',2) AS PATIENT_LAST_NAME,
        GENDER AS PATIENT_GENDER,
        CAST(DOB AS DATE) AS PATIENT_DOB,
        DATEDIFF(YEAR, DOB, CURRENT_DATE) AS PATIENT_AGE,
        CITY AS PATIENT_CITY
        FROM AIRFLOW_DB.BRONZE.PATIENTS_RAW;
    RETURN 'PATIENTS_TRANSFORM Created Successfully';
END;
$$;

-- Stored procedure to transform Treatments data
CREATE OR REPLACE PROCEDURE AIRFLOW_DB.SILVER.TREATMENTS_TRANSFORM_SP()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    CREATE OR REPLACE TABLE AIRFLOW_DB.SILVER.TREATMENTS_TRANSFORM AS
    SELECT
        T.TREATMENT_ID AS PATIENT_TREATMENT_ID,
        T.VISIT_ID AS PATIENT_VISIT_ID,
        CAST(V.VISIT_DATE AS DATE) AS PATIENT_VISIT_DATE,
        T.TREATMENT_TYPE AS TREATMENT_TYPE,
        T.OUTCOME AS TREATMENT_OUTCOME,
        T.COST AS TREATMENT_COST,
        V.PATIENT_ID AS PATIENT_ID,
        SPLIT_PART(P.NAME,' ',1) AS PATIENT_FIRST_NAME,
        SPLIT_PART(P.NAME,' ',2) AS PATIENT_LAST_NAME,
        V.DOCTOR_ID AS DOCTOR_ID,
        SPLIT_PART(D.NAME,' ',1) AS DOCTOR_FIRST_NAME,
        SPLIT_PART(D.NAME,' ',2) AS DOCTOR_LAST_NAME,
        D.SPECIALIZATION AS DOCTOR_SPECIALIZATION,
        V.HOSPITAL_ID AS HOSPITAL_ID,
        H.HOSPITAL_NAME AS HOSPITAL_NAME,
        H.CITY AS HOSPITAL_CITY
        FROM AIRFLOW_DB.BRONZE.TREATMENTS_RAW T
        JOIN AIRFLOW_DB.BRONZE.VISITS_RAW V ON T.VISIT_ID = V.VISIT_ID
        JOIN AIRFLOW_DB.BRONZE.PATIENTS_RAW P ON V.PATIENT_ID = P.PATIENT_ID
        JOIN AIRFLOW_DB.BRONZE.DOCTORS_RAW D ON V.DOCTOR_ID = D.DOCTOR_ID
        JOIN AIRFLOW_DB.BRONZE.HOSPITALS_RAW H ON V.HOSPITAL_ID = H.HOSPITAL_ID;
    RETURN 'TREATMENTS_TRANSFORM Created Successfully';
END;
$$;

-- Stored procedure to transform the Visits data
CREATE OR REPLACE PROCEDURE AIRFLOW_DB.SILVER.VISITS_TRANSFORM_SP()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    CREATE OR REPLACE TABLE AIRFLOW_DB.SILVER.VISITS_TRANSFORM AS
    SELECT
        V.VISIT_ID AS PATIENT_VISIT_ID,
        CAST(V.VISIT_DATE AS DATE) AS PATIENT_VISIT_DATE,
        V.PATIENT_ID AS PATIENT_ID,
        SPLIT_PART(P.NAME,' ',1) AS PATIENT_FIRST_NAME,
        SPLIT_PART(P.NAME,' ',2) AS PATIENT_LAST_NAME,
        V.DOCTOR_ID AS DOCTOR_ID,
        SPLIT_PART(D.NAME,' ',1) AS DOCTOR_FIRST_NAME,
        SPLIT_PART(D.NAME,' ',2) AS DOCTOR_LAST_NAME,
        D.SPECIALIZATION AS DOCTOR_SPECIALIZATION,
        V.HOSPITAL_ID AS HOSPITAL_ID,
        H.HOSPITAL_NAME AS HOSPITAL_NAME,
        V.DEPARTMENT AS HOSPITAL_DEPARTMENT,
        H.CITY AS HOSPITAL_CITY
        FROM AIRFLOW_DB.BRONZE.VISITS_RAW V
        JOIN AIRFLOW_DB.BRONZE.PATIENTS_RAW P ON V.PATIENT_ID = P.PATIENT_ID
        JOIN AIRFLOW_DB.BRONZE.DOCTORS_RAW D ON V.DOCTOR_ID = D.DOCTOR_ID
        JOIN AIRFLOW_DB.BRONZE.HOSPITALS_RAW H ON V.HOSPITAL_ID = H.HOSPITAL_ID;
    RETURN 'VISITS_TRANSFORM Created Successfully';
END;
$$;


--- CREATING GOLD LAYER OBJECTS - Four stored procedures reading data from silver tables and performing aggregations
-- All called via DAGs
USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;

USE SCHEMA AIRFLOW_DB.GOLD;

-- City healthcare access agg
CREATE OR REPLACE PROCEDURE AIRFLOW_DB.GOLD.CITY_HEALTHCARE_ACCESS_AGG_SP()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    CREATE OR REPLACE TABLE AIRFLOW_DB.GOLD.CITY_HEALTHCARE_ACCESS_AGG AS
    SELECT
        TP.PATIENT_CITY,
        COUNT(DISTINCT TP.PATIENT_ID) AS TOTAL_PATIENTS,
        COUNT(DISTINCT TV.HOSPITAL_ID) AS TOTAL_HOSPITALS
        FROM AIRFLOW_DB.SILVER.PATIENTS_TRANSFORM TP
        LEFT JOIN AIRFLOW_DB.SILVER.VISITS_TRANSFORM TV
        ON TP.PATIENT_ID = TV.PATIENT_ID
        GROUP BY TP.PATIENT_CITY;
    RETURN 'CITY_HEALTHCARE_ACCESS_AGG Create Successfully';
END;
$$;

-- Hospital performance app
CREATE OR REPLACE PROCEDURE AIRFLOW_DB.GOLD.HOSPITAL_PERFORMANCE_AGG_SP()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    CREATE OR REPLACE TABLE AIRFLOW_DB.GOLD.HOSPITAL_PERFORMANCE_AGG AS
    SELECT
        HOSPITAL_ID,
        HOSPITAL_NAME,
        HOSPITAL_CITY,
        COUNT(DISTINCT PATIENT_VISIT_ID) AS TOTAL_VISITS,
        COUNT(*) AS TOTAL_TREATMENTS,
        ROUND(AVG(TREATMENT_COST), 2) AS AVG_TREATMENT_COST,
        ROUND(
        100.0 * SUM(CASE WHEN TREATMENT_OUTCOME = 'Successful' THEN 1 ELSE 0 END) / COUNT(*),
        2
        ) AS SUCCESS_RATE
        FROM AIRFLOW_DB.SILVER.TREATMENTS_TRANSFORM
        GROUP BY HOSPITAL_ID, HOSPITAL_NAME, HOSPITAL_CITY;
    RETURN 'HOSPITAL_PERFORMANCE_AGG Created Successfully';
END;
$$;

-- Patient visit summary agg
CREATE OR REPLACE PROCEDURE AIRFLOW_DB.GOLD.PATIENT_VISIT_SUMMARY_AGG_SP()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    CREATE OR REPLACE TABLE AIRFLOW_DB.GOLD.PATIENT_VISIT_SUMMARY_AGG AS
        SELECT
        PATIENT_ID,
        PATIENT_FIRST_NAME,
        PATIENT_LAST_NAME,
        MIN(PATIENT_VISIT_DATE) AS FIRST_VISIT_DATE,
        MAX(PATIENT_VISIT_DATE) AS LAST_VISIT_DATE,
        COUNT(DISTINCT PATIENT_VISIT_ID) AS TOTAL_VISITS,
        ROUND(
        DATEDIFF(DAY, MIN(PATIENT_VISIT_DATE), MAX(PATIENT_VISIT_DATE)) /
        NULLIF(COUNT(DISTINCT PATIENT_VISIT_ID) - 1, 0),
        1
        ) AS AVG_DAYS_BETWEEN_VISITS
        FROM AIRFLOW_DB.SILVER.VISITS_TRANSFORM
        GROUP BY PATIENT_ID, PATIENT_FIRST_NAME, PATIENT_LAST_NAME;
    RETURN 'PATIENT_VISIT_SUMMARY_AGG Created Successfully';
END;
$$;

-- Patient Value agg
CREATE OR REPLACE PROCEDURE AIRFLOW_DB.GOLD.PATIENT_VALUE_AGG_SP()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    CREATE OR REPLACE TABLE AIRFLOW_DB.GOLD.PATIENT_VALUE_AGG AS
    SELECT
        PATIENT_ID,
        PATIENT_FIRST_NAME,
        PATIENT_LAST_NAME,
        COUNT(DISTINCT PATIENT_VISIT_ID) AS TOTAL_VISITS,
        COUNT(*) AS TOTAL_TREATMENTS,
        ROUND(SUM(TREATMENT_COST), 2) AS TOTAL_SPENT,
        ROUND(AVG(TREATMENT_COST), 2) AS AVG_COST_PER_TREATMENT
        FROM AIRFLOW_DB.SILVER.TREATMENTS_TRANSFORM
        GROUP BY PATIENT_ID, PATIENT_FIRST_NAME, PATIENT_LAST_NAME;
    RETURN 'PATIENT_VALUE_AGG Create Successfully';
END;
$$;

--- TESTING - AFTER RUNNING DAGS IN AIRFLOW --- 
--- BRONZE --- 
SELECT * FROM AIRFLOW_DB.BRONZE.DOCTORS_RAW;
SELECT * FROM AIRFLOW_DB.BRONZE.HOSPITALS_RAW;
SELECT * FROM AIRFLOW_DB.BRONZE.PATIENTS_RAW;
SELECT * FROM AIRFLOW_DB.BRONZE.TREATMENTS_RAW;
SELECT * FROM AIRFLOW_DB.BRONZE.VISITS_RAW;

--- SILVER --- 
SELECT * FROM AIRFLOW_DB.SILVER.PATIENTS_TRANSFORM;
SELECT * FROM AIRFLOW_DB.SILVER.TREATMENTS_TRANSFORM;
SELECT * FROM AIRFLOW_DB.SILVER.VISITS_TRANSFORM;

--- GOLD --- 
SELECT * FROM AIRFLOW_DB.GOLD.CITY_HEALTHCARE_ACCESS_AGG;
SELECT * FROM AIRFLOW_DB.GOLD.HOSPITAL_PERFORMANCE_AGG;
SELECT * FROM AIRFLOW_DB.GOLD.PATIENT_VALUE_AGG;
SELECT * FROM AIRFLOW_DB.GOLD.PATIENT_VISIT_SUMMARY_AGG;
